# -*- coding: utf-8 -*-
"""ProyekPertamaMLT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Uk-hcZA1FiZpmaamS3WsAhI6fz-iYVp

Menyiapkan akun kredensial kaggle
"""

!rm -rf ~/.kaggle && mkdir ~/.kaggle/

!mv kaggle.json ~/.kaggle/kaggle.json
!chmod 600 ~/.kaggle/kaggle.json

"""Import dataset dari kaggle"""

!kaggle datasets download -d deepcontractor/smoke-detection-dataset

"""Mengesktrak dataset"""

!unzip /content/smoke-detection-dataset.zip

"""Membaca data dan menampilkan"""

import pandas as pd
SmokeDect = pd.read_csv("/content/smoke_detection_iot.csv")
SmokeDect

"""Informasi Data"""

SmokeDect.info()

"""Deskripsi statik dataset"""

SmokeDect.describe()

"""Menghilangkan variabel tidak penting"""

SmokeDect.drop("Unnamed: 0", axis=1, inplace=True)
SmokeDect.drop("UTC", axis=1, inplace=True)
SmokeDect

"""Menangani Outliers"""

Q1 = SmokeDect.quantile(0.25)
Q3 = SmokeDect.quantile(0.75)
IQR=Q3-Q1
SmokeDect=SmokeDect[~((SmokeDect<(Q1-1.5*IQR))|(SmokeDect>(Q3+1.5*IQR))).any(axis=1)]
SmokeDect.shape

"""histogram masing-masing fitur"""

import matplotlib.pyplot as plt
SmokeDect.hist(bins=50, figsize=(20,15))
plt.show()

"""Heatmap korelasi"""

import seaborn as sns
plt.figure(figsize=(10, 8))
correlation_matrix = SmokeDect.corr().round(2)
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix", size=20)

"""Membagi Dataset menjadi data train dan data test"""

from sklearn.model_selection import train_test_split
 
X = SmokeDect.drop(["Fire Alarm"],axis =1)
y = SmokeDect["Fire Alarm"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 123)

"""Cek pembagian data"""

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""Standarisasi untuk data train"""

from sklearn.preprocessing import StandardScaler

features = ['Temperature[C]', 'Humidity[%]', 'TVOC[ppb]', 'eCO2[ppm]',
            'Raw H2', 'Raw Ethanol', 'Pressure[hPa]', 'PM1.0', 'PM2.5',
            'NC0.5', 'NC1.0', 'NC2.5', 'CNT']
scaler = StandardScaler()
scaler.fit(X_train[features])
X_train[features] = scaler.transform(X_train.loc[:, features])
X_train[features].head()

"""deskripsi statik data train setelah standarisasi"""

X_train[features].describe().round(4)

"""Menyiapkan dataframe untuk evaluasi"""

models = pd.DataFrame(index=['acc'], 
                      columns=['KNN', 'RandomForest'])

"""import model KNN"""

from sklearn.neighbors import KNeighborsClassifier

"""Training data dengan KNN"""

knn = KNeighborsClassifier(n_neighbors=10)
knn.fit(X_train, y_train)

"""Import model random forest dan mentraningnya"""

from sklearn.ensemble import RandomForestClassifier

RF = RandomForestClassifier()
RF.fit(X_train, y_train)

"""standarisasi untuk data test"""

X_test.loc[:, features] = scaler.transform(X_test[features])

"""Evaluasi Model"""

from sklearn import metrics
y_pred = knn.predict(X_test)
Y_pred = RF.predict(X_test)
models.loc['acc','KNN'] = metrics.accuracy_score(y_test, y_pred)
models.loc['acc','RandomForest'] = metrics.accuracy_score(y_test, Y_pred)
models